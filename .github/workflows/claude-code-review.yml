name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

jobs:
  claude-review:
    name: Claude AI Code Review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.{js,jsx,ts,tsx,py,java,go,rb,php,cpp,c,h,swift,kt,cs,dart,rs,scala,clj,elm,vue,svelte}
          separator: ","

      - name: Get PR diff
        id: pr-diff
        run: |
          # Get the diff for the PR
          git diff origin/${{ github.base_ref }}..HEAD > pr_diff.txt
          
          # Limit diff size to avoid token limits (first 10000 lines)
          head -n 10000 pr_diff.txt > limited_diff.txt
          
          # Escape the diff content for JSON
          DIFF_CONTENT=$(cat limited_diff.txt | jq -Rs .)
          echo "diff=$DIFF_CONTENT" >> $GITHUB_OUTPUT

      - name: Call Claude review function
        id: claude-review
        run: |
          # Prepare the payload
          PAYLOAD=$(jq -n \
            --arg pr_number "${{ github.event.pull_request.number }}" \
            --arg pr_title "${{ github.event.pull_request.title }}" \
            --arg pr_description "${{ github.event.pull_request.body }}" \
            --arg author "${{ github.event.pull_request.user.login }}" \
            --arg base_branch "${{ github.base_ref }}" \
            --arg head_branch "${{ github.head_ref }}" \
            --arg changed_files "${{ steps.changed-files.outputs.all_changed_files }}" \
            --argjson diff_content "${{ steps.pr-diff.outputs.diff }}" \
            '{
              pr_number: $pr_number,
              pr_title: $pr_title,
              pr_description: $pr_description,
              author: $author,
              base_branch: $base_branch,
              head_branch: $head_branch,
              changed_files: $changed_files,
              diff_content: $diff_content,
              repository: "${{ github.repository }}",
              github_token: "${{ secrets.GITHUB_TOKEN }}"
            }')

          # Call the Supabase edge function
          RESPONSE=$(curl -s -X POST \
            "https://ibihfzhrsllndxhfwgvb.supabase.co/functions/v1/claude-code-review" \
            -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImliaWhmemhyc2xsbmR4aGZ3Z3ZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ5MzAyNTAsImV4cCI6MjA3MDUwNjI1MH0.Zqikiwqpgb4lksNXcAdLA3fQzZwfV4WwFYzxpAwxCoU" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          echo "Claude review response: $RESPONSE"
          
          # Check if response contains success
          if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
            echo "✅ Claude review completed successfully"
          else
            echo "❌ Claude review failed"
            echo "$RESPONSE" | jq '.error // .message // .'
          fi

      - name: Check review status
        run: |
          echo "Code review process completed"
          echo "Check the PR comments for Claude's review"