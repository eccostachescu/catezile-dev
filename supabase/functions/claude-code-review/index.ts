import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface PRData {
  pr_number: string;
  pr_title: string;
  pr_description: string;
  author: string;
  base_branch: string;
  head_branch: string;
  changed_files: string;
  diff_content: string;
  repository: string;
  github_token: string;
}

interface ClaudeMessage {
  role: 'user' | 'assistant';
  content: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const anthropicApiKey = Deno.env.get('ANTHROPIC_API_KEY');
    if (!anthropicApiKey) {
      throw new Error('ANTHROPIC_API_KEY not configured');
    }

    const prData: PRData = await req.json();
    console.log(`Starting Claude review for PR #${prData.pr_number} in ${prData.repository}`);

    // Prepare the prompt for Claude
    const systemPrompt = `You are an expert code reviewer. Your task is to provide constructive, helpful feedback on code changes in a Pull Request.

Focus on:
1. **Code Quality**: Logic errors, potential bugs, edge cases
2. **Best Practices**: Following language/framework conventions
3. **Performance**: Inefficient algorithms, unnecessary computations
4. **Security**: Potential vulnerabilities, input validation
5. **Maintainability**: Code clarity, documentation, naming
6. **Architecture**: Design patterns, separation of concerns

Guidelines:
- Be constructive and educational, not just critical
- Suggest specific improvements with examples when possible
- Prioritize significant issues over minor style preferences
- Acknowledge good practices when you see them
- For Romanian projects, you can respond in Romanian if that helps

Format your response as a comprehensive review comment that will be posted on the GitHub PR.`;

    const userPrompt = `Please review this Pull Request:

**Title:** ${prData.pr_title}
**Description:** ${prData.pr_description || 'No description provided'}
**Author:** ${prData.author}
**Branch:** ${prData.head_branch} â†’ ${prData.base_branch}

**Changed Files:**
${prData.changed_files || 'No files listed'}

**Code Changes:**
\`\`\`diff
${prData.diff_content}
\`\`\`

Please provide a thorough code review focusing on the areas mentioned in the system prompt.`;

    const messages: ClaudeMessage[] = [
      {
        role: 'user',
        content: userPrompt
      }
    ];

    // Call Claude API
    console.log('Calling Claude API for code review...');
    const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${anthropicApiKey}`,
        'Content-Type': 'application/json',
        'x-api-key': anthropicApiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 4000,
        system: systemPrompt,
        messages: messages
      }),
    });

    if (!claudeResponse.ok) {
      const errorText = await claudeResponse.text();
      console.error('Claude API error:', errorText);
      throw new Error(`Claude API error: ${claudeResponse.status} ${errorText}`);
    }

    const claudeData = await claudeResponse.json();
    const reviewContent = claudeData.content[0].text;

    console.log('Claude review generated successfully');

    // Check if this is a test mode (mock token)
    const isTestMode = prData.github_token === 'mock_token_for_test';
    
    if (isTestMode) {
      // For testing, just return the review without posting to GitHub
      console.log('Test mode: Skipping GitHub API call');
      return new Response(
        JSON.stringify({ 
          success: true,
          message: `Claude review generated in test mode`,
          review_content: reviewContent,
          test_mode: true
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        },
      );
    }

    // Post review comment to GitHub PR (only in production)
    const githubResponse = await fetch(
      `https://api.github.com/repos/${prData.repository}/issues/${prData.pr_number}/comments`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${prData.github_token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Claude-Code-Review-Bot'
        },
        body: JSON.stringify({
          body: `## ðŸ¤– Claude AI Code Review

${reviewContent}

---
*Review generated by Claude AI â€¢ [Powered by CateZile.ro](https://catezile.ro)*`
        }),
      }
    );

    if (!githubResponse.ok) {
      const errorText = await githubResponse.text();
      console.error('GitHub API error:', errorText);
      throw new Error(`GitHub API error: ${githubResponse.status} ${errorText}`);
    }

    console.log(`Successfully posted Claude review to PR #${prData.pr_number}`);

    return new Response(
      JSON.stringify({ 
        success: true,
        message: `Claude review posted to PR #${prData.pr_number}`,
        review_length: reviewContent.length
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    );

  } catch (error) {
    console.error('Error in claude-code-review function:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message,
        stack: error.stack
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    );
  }
});